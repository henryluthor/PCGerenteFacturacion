@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@* Problema - Al hacer submit el controlador recibe numeros como string *@

@* @model PCGerenteFacturacion.DBModels.InvoiceHead *@
@model PCGerenteFacturacion.Models.InvoiceHeadModel

@using (Html.BeginForm("SaveInvoice", "Invoice", FormMethod.Post))
{
    @* The following line shows the version of MVC *@
    @* <p>MVC version: @typeof(Controller).Assembly.GetName().Version.ToString()</p> *@


    <div class="modal" id="responseModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="close"></button>
                </div>
                <div class="modal-body">
                    <p id="responseMessage"></p>
                    <button id="printInvoiceBtn">Print invoice</button>
                </div>                
            </div>
        </div>        
    </div>

    <partial name="_InvoiceDetail"></partial>

    @* En este div se va a llenar el listado de productos del modelo *@
    <div id="productList" style="background: red; display: none">

    </div>

    <div>
        <label for="subtotalinput">Subtotal</label>
        <input id="subtotalinput" type="number" readonly />
    </div>

    <div>
        @Html.LabelFor(Model => Model.TaxTwelve)
        @Html.EditorFor(Model => Model.TaxTwelve, new { htmlAttributes = new { type = "number", @readonly = "readonly" } })
    </div>

    <div>
        @Html.LabelFor(Model => Model.Total)
        @Html.EditorFor(Model => Model.Total, new { htmlAttributes = new { type = "number", @readonly = "readonly" } })
    </div>
    

    <button id="submitButtonPrime" class="btn btn-success" type="submit">Generar Factura (Prime)</button>
    <button id="submitButton" class="btn btn-success" type="button" onclick="makeSubmit()">Generar Factura</button>
}

<script>

    var productListIndex = -1;

    var subtotaltemp = 0;
    var subtotal = 0;

    var taxtwelvetemp = 0;
    var taxTwelve = 0;

    var total = 0;
    

    function AgregarProducto()
    {
        //bootstrap.Tooltip.VERSION me da la version de Bootstrap
        // console.log("Bootstrap version:");
        // console.log(bootstrap.Tooltip.VERSION);

        
        var precioTotal = parseInt($('#Quantity').val()) * parseFloat($('#Price').val());
        var rowToAppend = '<tr><td>' + $('#ProductName').val() + '</td><td>' + $('#Quantity').val() + '</td><td>' + $('#Price').val() + '</td><td>' + precioTotal + '</td></tr>';
        $('#invoicedetailtbody').append(rowToAppend);

        productListIndex++;

        var productNameValue = $('#ProductName').val();
        var inputHiddenProductNameToAppend = '<input id="Products[' + productListIndex + '].Productname" name="Products[' + productListIndex + '].ProductName" value="' + productNameValue + '" />';
        
        var quantityValue = parseInt($('#Quantity').val());
        var inputHiddenQuantityToAppend = '<input id="Products[' + productListIndex + '].Quantity" name="Products[' + productListIndex + '].Quantity" value="' + quantityValue + '" />';

        var priceValue = $('#Price').val();
        var inputHiddenPriceToAppend = '<input id="Products[' + productListIndex + '].Price" name="Products[' + productListIndex + '].Price" value="' + priceValue + '" />';

        var inputHiddenToAppend = '<div>' 
        + inputHiddenProductNameToAppend 
        + inputHiddenQuantityToAppend 
        + inputHiddenPriceToAppend 
        +'</div>';
        $('#productList').append(inputHiddenToAppend);

        subtotaltemp = precioTotal;
        subtotal += subtotaltemp;        
        $('#subtotalinput').val(subtotal);

        taxtwelvetemp = subtotaltemp * 0.12;
        taxTwelve += taxtwelvetemp;
        // console.log("tipodetaxtwelve:");
        // console.log(typeof(taxTwelve)); //number

        $('#TaxTwelve').val(taxTwelve);
        // console.log("tipoinputtaxtwelve:");
        // console.log(typeof($('#TaxTwelve').text())); //works the same as the line below
        // console.log(typeof ($('#TaxTwelve').val())); //string

        total = subtotal + taxTwelve;
        $('#Total').val(total);
        
    }


    function makeSubmit()
    {
        var form = $('#submitButton').closest('form');
        var formdata = form.serialize();
        var formUrl = form.attr('action');

        // console.log("formdata:");
        // console.log(formdata);

        console.log("Tax twelve:");
        console.log($('#TaxTwelve').val());
        console.log("Tipo de TaxTwelve:");
        console.log(typeof ($('#TaxTwelve').val()))
        console.log("multiplicacion");
        console.log($('#TaxTwelve').val() * 2);

        $.ajax({
            method: 'POST',
            url: formUrl,
            data: formdata,
            success: function (response) {
                console.log(response);
                console.log(response.message)

                // $('#responseMessage').text(response.message);
                $('#responseMessage').text(response.data);
                // $('#responseModal').modal('toggle');
                $('#responseModal').modal('show');
            },
            error: function (xhr, status, error) {
                alert("Ocurrio un error");
            }
        });
    }

    // $('#submitButton').click(function (event) {
    //     event.preventDefault();

    //     var form = $('#submitButton').closest('form');
    //     var formdata = form.serialize();
    //     var formUrl = form.attr('action');

    //     $.ajax({
    //         data: formdata,
    //         url: formUrl,
    //         method: 'POST',
    //         success: function (response) {
    //             alert("Factura generada exitosamente");
    //         },
    //         error: function (xhr, status, error) {
    //             alert("Ocurrio un error");
    //         }
    //     });
    // });


</script>